pipeline {
  agent none

  stages{
    stage("build"){
      agent {
        docker { 
          image 'python:2.7.16-slim'
          args '--user root'
        }
      }
      when{
        changeset "**/vote/**"
      }

      steps{
        echo 'step build'
        dir('vote'){
          sh 'pip install -r requirements.txt'
        }
      }
    }
    stage('test'){
      agent {
        docker { 
          image 'python:2.7.16-slim'
          args '--user root'
        }
      }
      when{
        changeset "**/vote/**"
      }

      steps{
        echo 'Running Unit Test on vote app.'
        dir('vote'){
          sh 'pip install -r requirements.txt'
          sh 'nosetests -v'
        }
      }
    }
    stage('docker-package'){
      agent any
      when{
        branch 'master'
        changeset "**/vote/*"
      }

      steps{
        echo 'Packaging vote app in Docker container'
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'hub.docker.com') {
            def voteImage = docker.build("yadkov/vote:${env.BUILD_ID}", "./vote/")
            voteImage.push()
            voteImage.push("latest")
          }
        }
      }
    }

  }
  post { 
    always { 
        echo 'End of pipeline'
    }
    success {
      slackSend (message: "Vote Build Success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)" )
    }  
    failure {
      slackSend (message: "Vote Build Failure - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)" )
    }  
  }
  
}

